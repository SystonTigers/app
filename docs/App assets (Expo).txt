sweet — here are the **asset placeholders** and a **tight Supabase schema + RLS policies** you can paste in and go. no fluff, just the bits you actually need.

---

# 🎨 App assets (Expo)

Put these files in `app/mobile/assets/`. I’m giving you SVGs so you can tweak colors easily; export them to PNG (1024×1024 for icon, 432×432 for adaptive icon, 1284×2778 for the iOS splash safe option). If you don’t want to export yourself, any online SVG→PNG tool will do.

### `app/mobile/assets/icon.svg` (export to 1024×1024 PNG)

```svg
<svg width="1024" height="1024" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg">
  <rect width="1024" height="1024" rx="200" fill="#0D0F12"/>
  <circle cx="512" cy="512" r="360" fill="#16181D"/>
  <g transform="translate(0,-8)">
    <circle cx="512" cy="520" r="220" fill="#FFD400"/>
    <circle cx="512" cy="520" r="188" fill="#0D0F12"/>
    <rect x="420" y="430" width="184" height="184" rx="28" fill="#FFD400"/>
    <rect x="448" y="458" width="128" height="128" rx="20" fill="#0D0F12"/>
  </g>
</svg>
```

### `app/mobile/assets/adaptive-icon.svg` (export to 432×432 PNG)

```svg
<svg width="432" height="432" viewBox="0 0 432 432" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="g" x1="0" y1="0" x2="1" y2="1">
      <stop offset="0" stop-color="#0D0F12"/><stop offset="1" stop-color="#11131A"/>
    </linearGradient>
  </defs>
  <rect width="432" height="432" fill="url(#g)"/>
  <circle cx="216" cy="216" r="128" fill="#16181D"/>
  <circle cx="216" cy="216" r="92" fill="#FFD400"/>
  <circle cx="216" cy="216" r="72" fill="#0D0F12"/>
</svg>
```

### `app/mobile/assets/splash.svg` (export to 1284×2778 PNG; center on screen)

```svg
<svg width="1284" height="2778" viewBox="0 0 1284 2778" xmlns="http://www.w3.org/2000/svg">
  <rect width="1284" height="2778" fill="#0D0F12"/>
  <g transform="translate(0,220)">
    <circle cx="642" cy="560" r="360" fill="#16181D" opacity="0.9"/>
    <text x="642" y="560" text-anchor="middle" font-family="Inter, system-ui" font-size="96" fill="#FFD400" font-weight="800">FIELD DROP</text>
    <text x="642" y="640" text-anchor="middle" font-family="Inter, system-ui" font-size="28" fill="#A8B0BD">Club media • Match control • Shop</text>
  </g>
</svg>
```

> after exporting, point your `app.json` at:
>
> * `"icon": "./assets/icon.png"`
> * `"android.adaptiveIcon.foregroundImage": "./assets/adaptive-icon.png"`
> * `"splash.image": "./assets/splash.png"`

---

# 🔐 Supabase schema + RLS (role-aware, team-scoped)

Create a folder `supabase/` in your repo and drop this as `supabase/schema.sql`. Then run in Supabase SQL editor.

### `supabase/schema.sql`

```sql
-- Enable UUID + auth helpers
create extension if not exists "uuid-ossp";

-- USERS (mirror of auth.users kept in profiles table)
create table if not exists public.profiles (
  id uuid primary key default uuid_generate_v4(),
  auth_id uuid unique not null,
  email text unique not null,
  created_at timestamptz default now()
);

-- TEAMS
create table if not exists public.teams (
  id uuid primary key default uuid_generate_v4(),
  name text not null,
  slogan text,
  timezone text not null default 'Europe/London',
  colors jsonb not null default '{}'::jsonb,
  badge_url text,
  plan text not null default 'starter',
  team_code text unique,
  created_by uuid not null references public.profiles(id) on delete cascade,
  created_at timestamptz default now()
);

-- MEMBERSHIPS (user ↔ team, with role)
create type user_role as enum ('manager','coach','parent','player');
create table if not exists public.team_memberships (
  user_id uuid not null references public.profiles(id) on delete cascade,
  team_id uuid not null references public.teams(id) on delete cascade,
  role user_role not null default 'parent',
  created_at timestamptz default now(),
  primary key (user_id, team_id)
);

-- INVITES (optional: email invites with codes)
create table if not exists public.team_invites (
  id uuid primary key default uuid_generate_v4(),
  team_id uuid not null references public.teams(id) on delete cascade,
  email text not null,
  code text not null,
  role user_role not null default 'parent',
  used boolean not null default false,
  created_at timestamptz default now(),
  expires_at timestamptz not null default (now() + interval '7 days')
);

-- MATCHES
create table if not exists public.matches (
  id uuid primary key default uuid_generate_v4(),
  team_id uuid not null references public.teams(id) on delete cascade,
  date_utc timestamptz not null,
  venue text,
  lat double precision,
  lon double precision,
  status text not null default 'scheduled',
  created_at timestamptz default now()
);

-- EVENTS (goal/assist/card/sub/note)
create type event_type as enum ('goal','assist','card_yellow','card_red','sin_bin','sub','note');
create table if not exists public.events (
  id uuid primary key default uuid_generate_v4(),
  match_id uuid not null references public.matches(id) on delete cascade,
  type event_type not null,
  minute int,
  player_id uuid, -- optional ref to your own players table later
  assist_id uuid,
  payload jsonb not null default '{}'::jsonb,
  created_by uuid not null references public.profiles(id) on delete set null,
  created_at timestamptz default now()
);

-- ============================
-- Row Level Security
-- ============================

alter table public.profiles enable row level security;
alter table public.teams enable row level security;
alter table public.team_memberships enable row level security;
alter table public.team_invites enable row level security;
alter table public.matches enable row level security;
alter table public.events enable row level security;

-- Helper: get profile.id from auth.uid()
create or replace function public.current_profile_id()
returns uuid language sql stable as $$
  select p.id from public.profiles p where p.auth_id = auth.uid()
$$;

-- Helper: is member of team
create or replace function public.is_member(team uuid)
returns boolean language sql stable as $$
  select exists(
    select 1 from public.team_memberships m
    where m.team_id = team and m.user_id = public.current_profile_id()
  )
$$;

-- Helper: is manager/coach (admin)
create or replace function public.is_staff(team uuid)
returns boolean language sql stable as $$
  select exists(
    select 1 from public.team_memberships m
    where m.team_id = team
      and m.user_id = public.current_profile_id()
      and m.role in ('manager','coach')
  )
$$;

-- PROFILES: a user can see only their own profile row
create policy "profiles_self_read" on public.profiles
  for select using (auth.uid() = auth_id);

create policy "profiles_self_upsert" on public.profiles
  for insert with check (auth.uid() = auth_id);
create policy "profiles_self_update" on public.profiles
  for update using (auth.uid() = auth_id);

-- TEAMS:
-- read if member; insert allowed (creates a new team; client fills created_by)
create policy "teams_read_if_member" on public.teams
  for select using (public.is_member(id));
create policy "teams_create" on public.teams
  for insert with check (auth.uid() is not null);
-- update if staff
create policy "teams_update_if_staff" on public.teams
  for update using (public.is_staff(id));

-- MEMBERSHIPS: read own team memberships; insert by staff; delete by staff
create policy "memberships_read_if_member" on public.team_memberships
  for select using (public.is_member(team_id));
create policy "memberships_insert_if_staff" on public.team_memberships
  for insert with check (public.is_staff(team_id));
create policy "memberships_delete_if_staff" on public.team_memberships
  for delete using (public.is_staff(team_id));

-- INVITES: read if staff; insert if staff; update use-status if staff
create policy "invites_read_if_staff" on public.team_invites
  for select using (public.is_staff(team_id));
create policy "invites_insert_if_staff" on public.team_invites
  for insert with check (public.is_staff(team_id));
create policy "invites_update_if_staff" on public.team_invites
  for update using (public.is_staff(team_id));

-- MATCHES: read if member; insert/update if staff
create policy "matches_read_if_member" on public.matches
  for select using (public.is_member(team_id));
create policy "matches_insert_if_staff" on public.matches
  for insert with check (public.is_staff(team_id));
create policy "matches_update_if_staff" on public.matches
  for update using (public.is_staff(team_id));

-- EVENTS: read if member; insert if staff; (optional) allow players to create 'note'
create policy "events_read_if_member" on public.events
  for select using (
    public.is_member((select team_id from public.matches where id = match_id))
  );
create policy "events_insert_if_staff" on public.events
  for insert with check (
    public.is_staff((select team_id from public.matches where id = match_id))
  );
```

> **flow:** on user sign-in, upsert a row into `public.profiles` mapping `auth_id` → `profiles.id`. when a manager creates a team, create the `teams` row and a `team_memberships` row with role `manager`. invites create rows in `team_invites`; when accepted, insert into `team_memberships`.

### minimal RPC for invite acceptance (optional)

```sql
create or replace function public.accept_invite(invite_code text)
returns boolean language plpgsql security definer as $$
declare
  inv public.team_invites%rowtype;
  me uuid;
begin
  select * into inv from public.team_invites where code = invite_code and used = false and expires_at > now();
  if not found then return false; end if;

  me := public.current_profile_id();
  insert into public.team_memberships(user_id, team_id, role)
  values (me, inv.team_id, inv.role)
  on conflict do nothing;

  update public.team_invites set used = true where id = inv.id;
  return true;
end $$;
```

---

# 🧩 Mobile: mapping Supabase auth → profiles

When user signs up/signs in, call this once:

```ts
// mobile: after supabase auth event
async function ensureProfile() {
  const user = (await supabase.auth.getUser()).data.user;
  if (!user) return;
  await fetch(`${process.env.EXPO_PUBLIC_API_BASE}/profiles/upsert`, {
    method: 'POST',
    headers: { 'content-type': 'application/json' },
    body: JSON.stringify({ auth_id: user.id, email: user.email })
  });
}
```

If you prefer to keep all profile writes inside Supabase, create an **Edge Function** there to upsert `profiles` and call that instead. The RLS above already guards visibility.

---

# 🧭 Where to save these

```
/app/mobile/assets/icon.svg
/app/mobile/assets/adaptive-icon.svg
/app/mobile/assets/splash.svg

/supabase/schema.sql
```

(Export the SVGs to PNG and keep both SVG+PNG in the repo; `app.json` points to PNGs.)

---

# ✅ What to do now (super short)

1. Export the three SVGs → PNGs and ensure `app.json` points at the PNGs.
2. Run the **Supabase** SQL in `supabase/schema.sql`.
3. In your app’s onboarding flow:

   * After sign-up, **upsert the profile** (as shown)
   * On “Create Team”, also insert a `team_memberships` row for the manager (`role='manager'`).
4. Use the **team code + invites** you already planned: either call `accept_invite(invite_code)` RPC or just insert into `team_memberships` directly (staff-only).

